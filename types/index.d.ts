import { OneByOne } from "./OneByOne";
import { UrlParse } from "./urlParse";
declare const _default: {
    debounce(callback: (...args: any[]) => void, delay: number): (...args: any[]) => void;
    polling(callback: (...args: any[]) => void | Promise<any>, interval: number, immediate?: boolean): () => void;
    deepCopy(obj: any): any;
    formatDate(formatStr: string): string;
    getNumberLenAfterDot(num: string | number): number;
    typeOf(target: any): string;
    isEmpty(target: any): boolean;
    randomNumber(start?: number, end?: number): number;
    randomColor(): string;
    getDateFromStr(dateString: string): Date;
    objectIsEqual(obj1: any, obj2: any): boolean;
    isEqual(a: any, b: any): boolean;
    qwFormat(num: string | number): string;
    getFormatStr(): any;
    strFillPrefix(target: string, fill: any, len: number): string;
    oneByOne(words: string, delay: number, callback?: (word: string, words: string) => boolean): void;
    getChineseNumber(number: number): any;
    FloatCalc: {
        add(a: number, b: number): number;
        minus(a: number, b: number): number;
        mul(a: number, b: number): number;
        division(a: number, b: number): number;
    };
    removeClass(dom: any, className: string): string;
    prefixStyle(style: string): string | false;
    eventProxy(containerEl: string | HTMLElement, eventType: string, targetEl: string | HTMLElement, callback: (e: Event) => void): () => void;
    isDom: (target: any) => target is HTMLElement;
    addClass: (target: any, className: string | string[]) => any;
    OneByOne: typeof OneByOne;
    UrlParse: typeof UrlParse;
};
export default _default;
